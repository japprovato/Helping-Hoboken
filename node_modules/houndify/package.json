{
  "name": "houndify",
  "version": "0.4.0",
  "main": "index.js",
  "devDependencies": {
    "babel": "6.5.2",
    "babel-core": "6.8.0",
    "babel-loader": "6.2.4",
    "babel-preset-es2015": "6.6.0",
    "babel-preset-stage-0": "6.5.0",
    "babelify": "7.3.0",
    "browserify-derequire": "0.9.4",
    "grunt": "1.0.1",
    "grunt-babel": "6.0.0",
    "grunt-contrib-clean": "1.0.0",
    "grunt-contrib-concat": "1.0.1",
    "grunt-contrib-copy": "1.0.0",
    "grunt-contrib-uglify": "1.0.1",
    "grunt-contrib-watch": "1.0.0",
    "grunt-shell": "latest",
    "grunt-webpack": "1.0.11",
    "webpack": "1.13.0",
    "webpack-dev-server": "1.14.1"
  },
  "dependencies": {
    "pako": "1.0.1",
    "request": "2.65.0",
    "uuid": "2.0.1",
    "ws": "1.1.1"
  },
  "author": {
    "name": "SoundHound Inc."
  },
  "readme": "# Houndify Web SDK\n\nThe Houndify Web SDK allows you to make voice and text queries to the Houndify API from your browser or Node.js script.\n\n\n## Features\n\n* Voice search (Chrome, Firefox)\n* Text search\n* Conversation state\n* Voice Activity Detection\n\n\n## Structure\n\nWeb SDK consists of two parts: an in-browser javascript library **houndify-web-sdk.min.js** and a server-side Node.js module **houndify**. \nBoth parts contain `HoundifyClient` that captures audio and text requests, and processes responses from the backend.\n\nBecause of CORS and security issues we also need a backend part that stores client credentials (Houndify Client ID and Client Key) and acts as a proxy for HTTP requests from browser to Houndify backend. Server-side part of SDK is a Node.js module **houndify** that also contains `HoundifyExpress` object with methods for building Express request handlers for authentication/proxy.\n\n\n## Set up\n\n### Client Side\n\nClient side of Web SDK doesn't have any dependencies and consists of a single JS file. You can include it via script tag and work with global `Houndify` object.\n\n```html\n<script src=\"/path/to/houndify-web-sdk.min.js\"></script>\n<script>\nvar myClient = new Houndify.HoundifyClient(/* ..args.. */);\n</script>\n```\n\nOr you can *require* `Houndify` as a CommonJS module.\n\n```javascript\nvar Houndify = require('path/to/houndify-web-sdk.min'); //or require('houndify');\n\nvar myClient = new Houndify.HoundifyClient(/* ..args.. */);\n```\n\n\n### Server Side\n\nServer side of SDK is a `HoundifyExpress` object in the a **houndify** module. \n\n**The module is not yet published to npm but is packed into houndify-VERSION.tgz. You can run `npm install houndify-VERSION.tgz` to install it.**\n\n`HoundifyExpress` object in the module has three methods used for authenticating and proxying voice and text search requests.\n\n```javascript\nvar houndifyExpress = require('houndify').HoundifyExpress;\n\napp.get('/textSearchProxy', houndifyExpress.createTextProxyHandler());\n```\n\n\n### Example Project\n\n*example* folder contains a project that shows a working setup of SDK. It contains a node *server.js* and *public* folder with frontend. \n\n`npm install` should install both **express** from npm and **houndify** from *houndify-VERSION.tgz*.\n\nYou'll need to fill in your Houndify Client information in *config.json*. Make sure you also change \"YOUR_CLIENT_ID\" to your actual client id in `requestInfo` in *example/public/index.html* file.\n\n**The latest versions of web browsers require secure connection for giving access to microphone.** While you can test Web SDK on *localhost* with HTTP server, you'll need to set up a HTTPS server for a different host. Set \"https\" flag in config file to \"true\" and add ssl certificate (server.crt) and key (server.key) files to the project root.\n\nRun `node server.js` in the project folder and go to the url shown in the output of the running node server.\n\n*example* folder also contains **node-client-text.js** and **node-client-voice.js**, sample Node.js scripts that show how to send text requests and stream audio from a file on a server side. You can find test audio files in **test_audio** folder.\n\n```bash\nnode node-client-text.js --query \"what is weather like in New York?\"\nnode node-client-voice.js --audio ./path/to/audio.wav\n```\n\n\n## Using SDK\n\nClient-side `Houndify` object contains a `HoundifyClient` constructor that accepts following options:\n\n```javascript\nvar myClient = new Houndify.HoundifyClient({\n\n  //Your Houndify Client ID\n  clientId: \"YOUR_CLIENT_ID\", \n\n  //You need to create an endpoint on your server\n  //for handling the authentication.\n  //See SDK's server-side method HoundifyExpress.createAuthenticationHandler().\n  authURL: \"/houndifyAuth\",\n\n  //For testing environment you might want to authenticate on frontend without Node.js server. \n  //In that case you may pass in your Houndify Client Key instead of \"authURL\".\n  //You should also pass clientKey instead of authURL if you're using HoundifyClient on server-side.\n  //clientKey: \"YOUR_CLIENT_KEY\",\n\n  //Enable Voice Activity Detection\n  //See https://houndify.com/docs#voice-activity-detection\n  //Default: true\n  enableVAD: true,\n\n  //You need to create an endpoint on your server\n  //for handling the authentication and proxying \n  //text search http requests to Houndify backend\n  //See SDK's server-side method HoundifyExpress.createTextProxyHandler().\n  //You don't need text search proxy if you're using HoundifyClient on a server side.\n  textSearchProxy: {\n    url: \"/textSearchProxy\",\n    method: \"GET\"\n    // headers: {}\n    // ... More proxy options will be added as needed\n  },\n\n  //Listeners\n\n  //Fires after server responds with Response JSON\n  //Info object contains useful information about the completed request\n  //See https://houndify.com/reference/HoundServer\n  onResponse: function(response, info) {},\n\n  //Fires if error occurs during the request\n  onError: function(err, info) {},\n\n  //Fires every time backend sends a speech-to-text \n  //transcript of a voice query\n  //See https://houndify.com/reference/HoundPartialTranscript\n  onTranscriptionUpdate: function(trObj) {},\n\n  //Fires after abort() method is called on voice search object\n  onAbort: function(info) {},\n\n  //Fires when start() metods is called on voice search object\n  onRecordingStarted: function() {},\n\n  //Fires when recording ends either after stop(), abort() or\n  //when server detects the end of audio query and responds \n  //(VAD: https://houndify.com/docs#voice-activity-detection)\n  onRecordingStopped: function() {},\n\n  //Fires every time new audio frame of recording is captured\n  onAudioFrame: function(frame) {}\n});\n```\n\nServer-side `HoundifyExpress` object has *createAuthenticationHandler()* and *createTextProxyHandler()* methods that create Express request handlers for authentication and proxying.\n\n```javascript\nvar Houndify = require('houndify');\n\n//Authenticates Voice and Text requests\napp.get('/houndifyAuth', Houndify.HoundifyExpress.createAuthenticationHandler({ \n  clientId:  \"YOUR_CLIENT_ID\", \n  clientKey: \"YOUR_CLIENT_KEY\"\n}));\n\n//Sends HTTP requests with Text queries to Houndify backend\napp.get('/textSearchProxy', Houndify.HoundifyExpress.createTextProxyHandler());\n```\n\n\n### Voice Search\n\n`voiceSearch` object in newly created `HoundifyClient` will have following methods *startRecording()*, *stop()*, *abort()*, *startStreaming()*, *write()*, *decodeArrayBuffer()*, and *isStreaming()*.\n\n```javascript\nvar myClient = new Houndify.HoundifyClient(/* ..args.. */);\n\n//see https://houndify.com/reference/RequestInfo\nvar requestInfo = { \n  ClientID: \"YOUR_CLIENT_ID\",\n  Latitude: 37.388309, \n  Longitude: -121.973968\n};\n\n//starts recording and streaming of voice search requests to Houndify backend\n//works only in latest chrome and firefox browsers\nmyClient.voiceSearch.startRecording(requestInfo);\n\n/* ... */\n\n//stops streaming voice search requests, expects the final response from backend\nmyClient.voiceSearch.stop();\n\n/* ... */\n\n//aborts voice search request, does not expect final response from backend\nmyClient.voiceSearch.abort();\n\n/* ... */\n\n//check if the client is currently streaming a voice request\nmyClient.voiceSearch.isStreaming();\n\n/* ... */\n\n//stream 8/16 kHz mono 16-bit little-endian PCM samples \n//in Int16Array chunks to backend\n//pass in original sample rate as the second argument to startStreaming() \n//and the audio will be resampled down to 16000 or 8000.\n//works in Node.js and browser.\nmyClient.voiceSearch.startStreaming(requestInfo, 16000);\nmyClient.voiceSearch.write(audioChunk);\nmyClient.voiceSearch.stop();\n\n/* ... */\n\n//in browsers only you can also upload and decode \n//audio file using decodeArrayBuffer() method\nfunction onFileUpload() {\n  // \"fileInput\" element is some input element:\n  // <input type=\"file\" id=\"fileInput\" onchange=\"onFileUpload()\" />\n  var fileElt = document.getElementById(\"fileInput\");\n  var file = fileElt.files[0];\n  if (!file) return;\n\n  var reader = new FileReader();\n  reader.onload = function() {\n    var arrayBuffer = reader.result;\n    myClient.voiceSearch.decodeArrayBuffer(arrayBuffer, function(audio) {\n      myClient.voiceSearch.startStreaming(requestInfo, 16000);\n      myClient.voiceSearch.write(audio);\n      myClient.voiceSearch.stop();\n    });\n  };\n\n  reader.readAsArrayBuffer(file);\n}\n```\n\n**Note!** For voice search to work in production the frontend should be served through secure connection. See example project for https node server setup. You do not need https for *localhost*.\n\nYou can use Voice Search in the browser without setting up Node.js server. You can pass in the authentication information (Houndify Client Key) directly to `HoundifyClient` object and use server of your choice without server-side **houndify** module.\n\n**Important!** Your client key is private and should not be exposed in the browser in production. Use Voice Search without authentication on server side only for testing, internal applications or in server-side `HoundifyClient`.\n\n\n### Text Search\n\n`textSearch` object in `HoundifyClient` will have *query()* method that accepts a query string and request info object.\n\n```javascript\nvar myClient = new Houndify.HoundifyClient(/* ..args.. */);\n\n//see https://houndify.com/reference/RequestInfo\nvar requestInfo = { \n  ClientID: \"YOUR_CLIENT_ID\",\n  Latitude: 37.388309, \n  Longitude: -121.973968\n};\n\nvar queryString = \"What is the weather like in Toronto?\";\n\n//send text search request to Houndify backend\nmyClient.textSearch.query(queryString, requestInfo);\n```\n\n**Note!** In order to use Text Search you'll need a proxy endpoint on your server. `HoundifyExpress` object contains *createTextProxyHandler()* method for setting that up.\n\n\n### Conversation State\n\nHoundified domains can use context to enable a conversational user interaction. For example, users can say \"show me coffee shops near me\", \"which ones have wifi?\", \"sort by rating\", \"navigate to the first one\". By default Conversation State will be stored and shared with each request. You can disable/enable this feature and clear the current Conversation State by calling following methods in `HoundifyClient.conversation`.\n\n```javascript\nvar myClient = new Houndify.HoundifyClient(/*  ..args.. */);\n\n//disable conversations\nmyClient.conversation.disable();\n\n//enable conversations\nmyClient.conversation.enable();\n\n//clear, \"forget\", current conversation \nmyClient.conversation.clear();\n\n//get current conversation \nmyClient.conversation.getState();\n\n//set the conversation\nmyClient.conversation.setState(newState);\n```\n\n\n## Reimplementing HoundifyExpress for other servers\n\nServer-side Node.js module **houndify** contains `HoundifyExpress` object with three methods, two of which are mentioned above (creating express middleware for authentication and proxying requests) and one more helper one. **houndify-node.js** contains these three simple methods with annotations to make it easy to implement the server-side logic for servers other than Express.\n\n**signToken(token, clientKey)** accepts a token/message and a Houndify Client Key and returns the token signed with the key using HMAC scheme. This method is used by *createAuthenticationHandler()* for authenticating Voice and Text Requests.\n\n```javascript\nvar crypto = require('crypto');\n\n//URL Decode Base64 String\nfunction base64_url_decode(input) {\n    return input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n}\n//URL Encode Base64 String\nfunction base64_url_encode(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction signToken(token, clientKey) {\n    var clientKeyBin = new Buffer(base64_url_decode(clientKey), \"base64\");\n    var hash = crypto.createHmac('sha256', clientKeyBin).update(token).digest(\"base64\");\n    return base64_url_encode(hash);\n}\n```\n\n**createAuthenticationHandler({ clientId, clientKey })** accepts an object with Houndify Client Id and secret Houndify Client Key and returns an Express handler for authentication requests from client-side `HoundifyClient`. These requests will send a token as a query parameter and expect the signature back as a plain text.\n\n```javascript\nfunction createAuthenticationHandler(opts) { \n    return function (req, res) {\n        var signature = signToken(req.query.token, opts.clientKey);\n        res.send(signature);\n    }\n}\n```\n\n**createTextProxyHandler()** returns a simple Express handler for proxying Text Requests from client-side `HoundifyClient` to Houndify backend. Query parameters of the incoming request should be reused for the request to backend (GET https://api.houndify.com/v1/text). Pick all \"hound-*\" headers from the incoming request, three required \"hound-request-authentication\", \"hound-client-authentication\", \"hound-request-info\", and two optional \"hound-input-language-english-name\" and \"hound-input-language-ietf-tag\", and send them to the backend with the same names.\n\n```javascript\nvar request = require('request');\n\nfunction createTextProxyHandler() {\n    return function (req, res) {\n        //houndify backend endpoint for text requests\n        var houndBackend = \"https://api.houndify.com/v1/text\";\n\n        //pick following three required and two optional headers from incoming request and send them to the backend\n        var houndifyHeaders = {\n            'Hound-Request-Authentication': req.headers['hound-request-authentication'],\n            'Hound-Client-Authentication': req.headers['hound-client-authentication'],\n            'Hound-Request-Info': req.headers['hound-request-info']\n        }; \n\n        if (req.headers[\"hound-input-language-english-name\"])\n            houndifyHeaders[\"Hound-Input-Language-English-Name\"] = req.headers[\"hound-input-language-english-name\"];\n        if (req.headers[\"hound-input-language-ietf-tag\"])\n            houndifyHeaders[\"Hound-Input-Language-IETF-Tag\"] = req.headers[\"hound-input-language-ietf-tag\"];\n\n        //keep query parameters from incoming request\n        request({\n            url: houndBackend,\n            qs: req.query,\n            headers: houndifyHeaders,\n        }, function (err, resp, body) {\n            //if there's an error respond with '{ error: \"%error string%\" }' JSON\n            if (err) return res.send({ error: err.toString() });\n            \n            //else send the response body from backend as it is\n            res.send(body);\n        });\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "description": "The Houndify Web SDK allows you to make voice and text queries to the Houndify API from your browser or Node.js script.",
  "_id": "houndify@0.4.0",
  "_shasum": "e48a0b92f3fb77b5cef95428abf1b4d6d6fcb0bb",
  "_resolved": "file:houndify-0.4.0.tgz",
  "_from": "houndify-0.4.0.tgz"
}
